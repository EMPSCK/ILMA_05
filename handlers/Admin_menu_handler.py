from aiogram import Router, F
from aiogram import types

import config
from keyboards import admins_kb
from queries import get_user_status_query
from queries import admins_queries
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from admin_moves import update_fttsar_judges
from queries import scrutineer_queries
from aiogram.filters import Command
router = Router()
tg_id_to_CompId = {}

class Create_comp(StatesGroup):
    next_create_comp_state = State()

@router.message(Command("admin"))
async def cmd_start(message: Message, state: FSMContext):
    if message.from_user.id in config.admins:
        await message.answer('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ admin –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ SS6', reply_markup=admins_kb.menu_kb)
    else:
        await message.answer('‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')

@router.callback_query(F.data == 'back_bbb')
async def cmd_start(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id in config.admins:
        await call.message.edit_text('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ admin –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ SS6', reply_markup=admins_kb.menu_kb)
    else:
        await call.message.edit_text('‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')

#–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
@router.callback_query(F.data == 'create_competition')
async def cmd_start(call: types.CallbackQuery, state:FSMContext):
    user_status = await get_user_status_query.get_user_status(call.from_user.id)
    if user_status == 1:
        text = '–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤:\n\ndate1: \ndate2: \ncompName: \ncity: \nchairman_Id:\nscrutineerId: \nlin_const: \nisActive: \nisSecret: '
        await call.message.answer(text=text, reply_markup=admins_kb.create_comp_kb)
        await state.set_state(Create_comp.next_create_comp_state)


@router.message(Create_comp.next_create_comp_state)
async def f2(message: Message, state: FSMContext):
    new_comp_status = await admins_queries.create_new_comp(message.text)
    if new_comp_status == 1:
        await message.answer('–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞')
        await message.answer('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ admin –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ SS6', reply_markup=admins_kb.menu_kb)
        await state.clear()
    else:
        await message.answer('ü§î–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=admins_kb.create_comp_kb)



@router.callback_query(F.data == 'cancel_create_comp')
async def f4(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ admin –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ SS6', reply_markup=admins_kb.menu_kb)


#–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.callback_query(F.data == 'show_tournament_list')
async def cmd_start(call: types.CallbackQuery):
    user_status = await get_user_status_query.get_user_status(call.from_user.id)
    if user_status == 1:
        text = await admins_queries.get_tournament_list()
        await call.message.edit_text(text)
        await call.message.answer('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ admin –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ SS6', reply_markup=admins_kb.menu_kb)


#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
class Edit_comp(StatesGroup):
    next_edit_comp_state = State()
    next_edit_comp_state_2 = State()


@router.callback_query(F.data == 'edit_competition')
async def cmd_start(call: types.CallbackQuery, state:FSMContext):
    user_status = await get_user_status_query.get_user_status(call.from_user.id)
    if user_status == 1 or call.from_user.id in config.admins:
        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–¥ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:'
        await call.message.edit_text(text=text, reply_markup=admins_kb.create_comp_kb)
        await state.set_state(Edit_comp.next_edit_comp_state)


@router.message(Edit_comp.next_edit_comp_state)
async def f2(message: Message, state: FSMContext):
    id = message.text
    comp_data = await admins_queries.get_tournament(id)
    if comp_data is None or comp_data == 0:
        await message.answer('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=admins_kb.create_comp_kb)
    else:
        tg_id_to_CompId[message.from_user.id] = id
        text = '–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤:\ndate1: \ndate2: \ncompName: \ncity: \nchairman_Id: \nscrutineerId: \nlin_const: \nisActive: \nisSecret: '
        await message.answer(str(comp_data)+'\n\n' + text, reply_markup=admins_kb.create_comp_kb)
        await state.set_state(Edit_comp.next_edit_comp_state_2)


@router.message(Edit_comp.next_edit_comp_state_2)
async def f2(message: Message, state: FSMContext):
    text = message.text
    edit_comp_status = await admins_queries.edit_tournament(tg_id_to_CompId[message.from_user.id], message.text)
    if edit_comp_status == 1:
        await message.answer('–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
        await message.answer('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ admin –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ SS6', reply_markup=admins_kb.menu_kb)
        await state.clear()
    else:
        await message.answer('ü§î–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=admins_kb.create_comp_kb)


@router.message(Edit_comp.next_edit_comp_state_2)
async def f2(message: Message, state: FSMContext):
    text = message.text
    edit_comp_status = await admins_queries.edit_tournament(tg_id_to_CompId[message.from_user.id], message.text)
    if edit_comp_status == 1:
        await message.answer('–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
        await message.answer('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ admin –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ SS6', reply_markup=admins_kb.menu_kb)
        await state.clear()
    else:
        await message.answer('ü§î–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=admins_kb.create_comp_kb)


@router.callback_query(F.data == 'update_fttsar_judges')
async def cmd_start(call: types.CallbackQuery, state:FSMContext):
    user_status = await get_user_status_query.get_user_status(call.from_user.id)
    if user_status == 1 or call.from_user.id in config.admins:
        await call.message.answer('–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 5 –º–∏–Ω.')
        status = await update_fttsar_judges.update_judges_list()
        if status == 1:
            await call.message.answer('–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω')
        else:
            await call.message.answer('‚ùå–û—à–∏–±–∫–∞')


from aiogram.filters import Command

oldinfo = {}
@router.callback_query(F.data == 'edit_tournament')
async def cmd_start(call: types.CallbackQuery, state:FSMContext):
    user_status = await get_user_status_query.get_user_status(call.from_user.id)
    if user_status == 1 or call.from_user.id in config.admins:

        markup = await admins_kb.get_tour_list_markup()
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ', reply_markup=markup)


@router.callback_query(F.data.startswith('tournament_edit_choice_'))
async def cmd_start(call: types.CallbackQuery):
    compId = int(call.data.replace('tournament_edit_choice_', ''))
    oldinfo[call.from_user.id] = {'compId': compId}
    text = await admins_queries.get_tour_info(compId)
    await call.message.edit_text(text, reply_markup=admins_kb.edit_tour_kb)



@router.callback_query(F.data == 'active_tour')
async def cmd_start(call: types.CallbackQuery, state:FSMContext):
    try:
        user_status = await get_user_status_query.get_user_status(call.from_user.id)
        if user_status == 1 or call.from_user.id in config.admins:
            compId = oldinfo[call.from_user.id]['compId']
            await admins_queries.activate_tour(compId)
            text = await admins_queries.get_tour_info(compId)
            await call.message.edit_text(text, reply_markup=admins_kb.edit_tour_kb)
    except:
        await call.answer('‚úÖ–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ')


from handlers import start_stage_handler
@router.callback_query(F.data == 'delactive_tour')
async def cmd_start(call: types.CallbackQuery, state:FSMContext):
    try:
        user_status = await get_user_status_query.get_user_status(call.from_user.id)
        if user_status == 1 or call.from_user.id in config.admins:
            compId = oldinfo[call.from_user.id]['compId']
            await admins_queries.deactivatetour(compId)
            text = await admins_queries.get_tour_info(compId)
            await call.message.edit_text(text, reply_markup=admins_kb.edit_tour_kb)
    except:
        await call.answer('‚ùå–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ')
